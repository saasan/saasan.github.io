<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://slx.jp/feed.xml" rel="self" type="application/atom+xml" /><link href="https://slx.jp/" rel="alternate" type="text/html" hreflang="ja" /><updated>2025-08-26T06:16:19+09:00</updated><id>https://slx.jp/feed.xml</id><title type="html">slx.jp</title><author><name>saasan</name></author><entry><title type="html">Optimize-VHD に破壊された WSL の ext4.vhdx からファイルを取り出す</title><link href="https://slx.jp/blog/2025/07/26/optimize-vhd%E3%81%A7%E7%A0%B4%E5%A3%8A%E3%81%95%E3%82%8C%E3%81%9Fwsl%E3%81%AEext4.vhdx%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99.html" rel="alternate" type="text/html" title="Optimize-VHD に破壊された WSL の ext4.vhdx からファイルを取り出す" /><published>2025-07-26T14:50:00+09:00</published><updated>2025-07-26T14:50:00+09:00</updated><id>https://slx.jp/blog/2025/07/26/optimize-vhd%E3%81%A7%E7%A0%B4%E5%A3%8A%E3%81%95%E3%82%8C%E3%81%9Fwsl%E3%81%AEext4.vhdx%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99</id><content type="html" xml:base="https://slx.jp/blog/2025/07/26/optimize-vhd%E3%81%A7%E7%A0%B4%E5%A3%8A%E3%81%95%E3%82%8C%E3%81%9Fwsl%E3%81%AEext4.vhdx%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%99.html"><![CDATA[<p>WSL の VHDX ファイルが 850GB くらいまで肥大化してたんで
Optimize-VHD を実行したら、ファイルが破損して WSL が起動しなくなった。
Windows 11 自体でのマウントや diskpart での認識、
Hyper-V マネージャーのディスクの検査、市販 VHD 修復ソフトの無料デモなど試したけどどれもダメ。</p>

<p>最近開発は全部 WSL 上でやってたうえに、
作りかけのものは GitHub に push しておらずバックアップなし。
数ヶ月の作業が消えてしまった…。</p>

<h2 id="状況確認">状況確認</h2>

<p>諦めきれないので Claude に相談しつつ状況確認と復旧を試みる。</p>

<p>まずは ext4.vhdx をいつも使ってる Zorin OS へ持っていき <code class="language-plaintext highlighter-rouge">qemu-img info ext4.vhdx</code> を実行。<br />
※Zorin OS は Ubuntu 系 Linux ディストリビューション</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>libguestfs-tools qemu-utils
<span class="o">(</span>略<span class="o">)</span>
<span class="nv">$ </span>qemu-img info ext4.vhdx
qemu-img: VHDX BAT entry 5939 start offset 211707494400 points after end of file <span class="o">(</span>27629977600<span class="o">)</span><span class="nb">.</span> Image has probably been truncated.
qemu-img: Could not open <span class="s1">'ext4.vhdx'</span>: Could not open <span class="s1">'ext4.vhdx'</span>: Invalid argument
</code></pre></div></div>

<h3 id="claude-による解説">Claude による解説</h3>

<blockquote>
  <p>このエラーメッセージは、VHDXファイルが<strong>深刻に破損している</strong>ことを示しています。</p>

  <h4 id="エラーの詳細解析">エラーの詳細解析</h4>

  <p><code class="language-plaintext highlighter-rouge">VHDX BAT entry 5939 start offset 211707494400 points after end of file (27629977600)</code></p>

  <p><strong>BAT (Block Allocation Table)</strong>: VHDXファイル内のデータブロックの位置を管理するテーブル</p>

  <ul>
    <li><strong>エントリ5939</strong>: データブロック#5939の位置情報</li>
    <li><strong>start offset 211707494400</strong>: このブロックが211GB地点にあるとBAT記録</li>
    <li><strong>end of file (27629977600)</strong>: 実際のファイルサイズは約27GB</li>
    <li><strong>問題</strong>: 27GBしかないファイルの211GB地点を参照しようとしている</li>
  </ul>

  <p><code class="language-plaintext highlighter-rouge">Image has probably been truncated</code></p>

  <p>ファイルが途中で切断されている（不完全な状態）</p>

  <p><code class="language-plaintext highlighter-rouge">Could not open 'ext4.vhdx': Invalid argument</code></p>

  <p>QEMU/libguestfsがファイルを認識できない</p>
</blockquote>

<p>うおお…</p>

<blockquote>
  <p><strong>深刻に破損している</strong></p>
</blockquote>

<p>終わった……</p>

<p>と思ったが Claude は部分的なデータ救出方法も提案してくれた。</p>

<h2 id="claude-による現実的な復旧方法の提案">Claude による現実的な復旧方法の提案</h2>

<blockquote>
  <h3 id="期待できる救出レベル">期待できる救出レベル</h3>

  <ul>
    <li><strong>完全復旧</strong>: 困難（BAT破損のため）</li>
    <li><strong>部分データ</strong>: 可能性あり</li>
    <li><strong>設定ファイル</strong>: 救出可能かも</li>
  </ul>

  <h3 id="推奨アプローチ">推奨アプローチ</h3>

  <ol>
    <li><strong>ddrescue</strong>で読み取り可能な部分をコピー</li>
    <li>部分イメージから<strong>testdisk/photorec</strong>でファイル救出</li>
    <li>重要データのみ手動で救出</li>
    <li>WSL環境は<strong>再構築</strong></li>
  </ol>

  <h3 id="データ救出の順序">データ救出の順序</h3>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 部分コピー作成</span>
ddrescue <span class="nt">-d</span> <span class="nt">-r3</span> ext4.vhdx recovered.raw recovery.log

<span class="c"># 2. パーティション情報の確認</span>
testdisk recovered.raw

<span class="c"># 3. ファイル救出</span>
photorec recovered.raw
</code></pre></div>  </div>

  <p>残念ながら、このレベルの破損では完全復旧は困難です。部分的なデータ救出に焦点を当てることをお勧めします。</p>
</blockquote>

<h2 id="データの救出">データの救出</h2>

<h3 id="ddrescue">ddrescue</h3>

<p><code class="language-plaintext highlighter-rouge">ddrescue -d -r3 ext4.vhdx recovered.raw recovery.log</code></p>

<p><code class="language-plaintext highlighter-rouge">ddrescue</code> は不良セクタの多いディスクを扱える dd の強化版みたいなものらしい
(<a href="https://ja.wikipedia.org/wiki/Ddrescue" target="_blank">Wikipedia</a> 調べ)。</p>

<p><code class="language-plaintext highlighter-rouge">-d</code> が入力ファイルへのダイレクトディスクアクセス、<code class="language-plaintext highlighter-rouge">-r</code> が試行回数の指定。
問題なさそうなのでそのまま実行したあと、しばらく待つと <code class="language-plaintext highlighter-rouge">recovered.raw</code> が出力された。</p>

<h3 id="testdisk">TestDisk</h3>

<p><code class="language-plaintext highlighter-rouge">testdisk recovered.raw</code></p>

<p><code class="language-plaintext highlighter-rouge">testdisk</code> は失われたパーティションの復元や壊れたファイルシステムの復元ができるらしい
(<a href="https://ja.wikipedia.org/wiki/TestDisk" target="_blank">Wikipedia</a> 調べ)。</p>

<p>実行してみたが ext4 パーティションの存在が確認できただけで、ファイルの救出には至らなかった。</p>

<h3 id="photorec">PhotoRec</h3>

<p><code class="language-plaintext highlighter-rouge">photorec recovered.raw</code></p>

<p><code class="language-plaintext highlighter-rouge">photorec</code> は失われたファイルを回復することができるらしい
(<a href="https://ja.wikipedia.org/wiki/PhotoRec" target="_blank">Wikipedia</a> 調べ)。</p>

<p>救出対象とするファイルは拡張子単位で指定可能だが、
今回はできる限り復旧したかったため指定せずに実行。
約15万ファイルが出力された。</p>

<p>救出されたファイルは <code class="language-plaintext highlighter-rouge">recup_dir.x</code> というディレクトリに
<code class="language-plaintext highlighter-rouge">fxxxxxxx.ext</code> というファイル名で出力される (<code class="language-plaintext highlighter-rouge">x</code> は数字)。
救出したかった JavaScript と JSON ファイルは
テキストファイル (<code class="language-plaintext highlighter-rouge">*.txt</code>) として出力されていた。</p>

<p>以下のように検索・コピーして、ファイルの一部を取り出すことができた。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 検索</span>
<span class="nv">$ </span>find recup_dir.<span class="k">*</span> <span class="nt">-name</span> <span class="s1">'*.txt'</span> <span class="nt">-print0</span> | xargs <span class="nt">-0</span> <span class="nb">grep</span> <span class="nt">-l</span> <span class="s1">'検索する文字列'</span>
<span class="c"># コピー</span>
<span class="nv">$ </span>find recup_dir.<span class="k">*</span> <span class="nt">-name</span> <span class="s1">'*.txt'</span> <span class="nt">-print0</span> | xargs <span class="nt">-0</span> <span class="nb">grep</span> <span class="nt">-l</span> <span class="s1">'検索する文字列'</span> | xargs <span class="nt">-I</span> <span class="o">{}</span> <span class="nb">cp</span> <span class="o">{}</span> コピー先
</code></pre></div></div>

<h2 id="まとめ">まとめ</h2>

<p>ちゃんとバックアップは取ろう！</p>]]></content><author><name>saasan</name></author><category term="blog" /><category term="WSL" /><summary type="html"><![CDATA[バックアップは取っとけ！]]></summary></entry><entry><title type="html">「WSL の起動中にエラーが発生しました」への対応</title><link href="https://slx.jp/blog/2025/07/13/wsl-%E3%81%AE%E8%B5%B7%E5%8B%95%E4%B8%AD%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C.html" rel="alternate" type="text/html" title="「WSL の起動中にエラーが発生しました」への対応" /><published>2025-07-13T23:45:00+09:00</published><updated>2025-07-13T23:45:00+09:00</updated><id>https://slx.jp/blog/2025/07/13/%E3%80%8Cwsl-%E3%81%AE%E8%B5%B7%E5%8B%95%E4%B8%AD%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%8D%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C</id><content type="html" xml:base="https://slx.jp/blog/2025/07/13/wsl-%E3%81%AE%E8%B5%B7%E5%8B%95%E4%B8%AD%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C.html"><![CDATA[<p>結論から言うと Docker Desktop を更新したら直った。</p>

<p>今後のために原因の確認方法を残しておく。</p>

<ol>
  <li>イベントビューアーを起動</li>
  <li>「Windows ログ」&gt;「Application」を開く</li>
  <li>右側の「現在のログをフィルター…」をクリック</li>
  <li>イベントソースに「WSL」と入力してフィルタをかける</li>
</ol>

<p>最新の警告イベント内容を確認すると以下の通りだった。</p>

<blockquote>
  <p>ソース “WSL” からのイベント ID 0 の説明が見つかりません。このイベントを発生させるコンポーネントがローカル コンピューターにインストールされていないか、インストールが壊れています。ローカル コンピューターにコンポーネントをインストールするか、コンポーネントを修復してください。</p>

  <p>イベントが別のコンピューターから発生している場合、イベントと共に表示情報を保存する必要があります。</p>

  <p>イベントには次の情報が含まれています:</p>

  <p>Unknown key ‘automount.crossDistro’ in /etc/wsl.conf:3</p>

  <p>メッセージ リソースは存在しますが、メッセージがメッセージ テーブルに見つかりませんでした。</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">/etc/wsl.conf</code> に問題があるようだが
Ubuntu のものをを見ても <code class="language-plaintext highlighter-rouge">automount.crossDistro</code> という記述はない。</p>

<p><code class="language-plaintext highlighter-rouge">wsl -l -v</code> でディストリビューションを確認する。</p>

<pre><code class="language-cmd">&gt;wsl -l -v
  NAME              STATE           VERSION
* Ubuntu            Running         2
  docker-desktop    Running         2
</code></pre>

<p>Ubuntu 以外に
<code class="language-plaintext highlighter-rouge">docker-desktop</code> があるため Docker の問題と判断。
Docker Desktop を更新したところ問題が解消した。</p>

<p>更新前に確認するのを忘れていたが、
更新後に <code class="language-plaintext highlighter-rouge">docker-desktop</code> の
<code class="language-plaintext highlighter-rouge">/etc/wsl.conf</code> を確認しところ以下のようになっていた。</p>

<pre><code class="language-cmd">&gt;wsl -d docker-desktop cat /etc/wsl.conf
[automount]
root = /mnt/host
options = "metadata"
[interop]
enabled = true
</code></pre>]]></content><author><name>saasan</name></author><category term="blog" /><category term="WSL" /><category term="Docker" /><summary type="html"><![CDATA[結論から言うと Docker Desktop を更新したら直った。]]></summary></entry><entry><title type="html">Claude for Desktop で AWS Documentation MCP Server を使ってみる</title><link href="https://slx.jp/blog/2025/06/22/claude-for-desktop%E3%81%A7aws-documentation-mcp-server%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B.html" rel="alternate" type="text/html" title="Claude for Desktop で AWS Documentation MCP Server を使ってみる" /><published>2025-06-22T23:00:00+09:00</published><updated>2025-06-22T23:00:00+09:00</updated><id>https://slx.jp/blog/2025/06/22/claude-for-desktop%E3%81%A7aws-documentation-mcp-server%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B</id><content type="html" xml:base="https://slx.jp/blog/2025/06/22/claude-for-desktop%E3%81%A7aws-documentation-mcp-server%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B.html"><![CDATA[<p>MCP の使い道を調べているうちに知った
AWS Documentation MCP Server が便利そうだったので使ってみた。</p>

<h2 id="aws-documentation-mcp-server-とは">AWS Documentation MCP Server とは？</h2>

<p>AI アシスタントが AWS の公式ドキュメントを参照して回答できるようにする MCP Server。
これにより、AWS に関する質問に対してより正確で詳細な回答が提供されるようになる。</p>

<p><a href="https://awslabs.github.io/mcp/servers/aws-documentation-mcp-server/" target="_blank">AWS Documentation MCP Server - AWS MCP Servers</a></p>

<h2 id="aws-documentation-mcp-server-を起動する">AWS Documentation MCP Server を起動する</h2>

<p>GitHub の
<a href="https://github.com/awslabs/mcp" target="_blank">awslabs/mcp</a>
を git clone して docker build で起動するだけ。</p>

<p>uv と Python のインストールから説明しているサイトもあるが、
 現状 Dockerfile が提供されておりインストール不要になっている。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:awslabs/mcp.git aws-mcp
docker build <span class="nt">-t</span> mcp/aws-documentation aws-mcp/src/aws-documentation-mcp-server
</code></pre></div></div>

<h2 id="claude-for-desktop-の設定">Claude for Desktop の設定</h2>

<ol>
  <li>ウィンドウ左上のハンバーガーボタンから「ファイル &gt; 設定…」をクリックする
<img src="/assets/images/blog/2025-06-22/claude-for-desktop1.png" alt="設定画面を開く" /></li>
  <li>「開発者」をクリックする</li>
  <li>「構成を編集」をクリックする</li>
  <li><code class="language-plaintext highlighter-rouge">claude_desktop_config.json</code> があるフォルダが開く</li>
  <li><code class="language-plaintext highlighter-rouge">claude_desktop_config.json</code> へ
<a href="https://awslabs.github.io/mcp/servers/aws-documentation-mcp-server/#installation" target="_blank">Installation</a>
にかかれている Docker 用 JSON を書き込む
1． 設定画面を閉じる</li>
  <li>ウィンドウ左上のハンバーガーボタンから「ファイル &gt; 終了」をクリックし Claude for Desktop を終了させる</li>
  <li>再度 Claude for Desktop を起動すると、チャット入力欄のメニューに追加されている
<img src="/assets/images/blog/2025-06-22/claude-for-desktop2.png" alt="チャット入力欄のメニューに追加された AWS Documentation MCP Server" /></li>
</ol>

<h2 id="使ってみる">使ってみる</h2>

<p>AWS に関する質問をすると外部連携の許可を何度か確認される。</p>

<p><img src="/assets/images/blog/2025-06-22/claude-for-desktop3.png" alt="外部連携の許可" /></p>

<p>しばらく待つと AWS の公式ドキュメントを元にした回答が提示される。</p>

<p><img src="/assets/images/blog/2025-06-22/claude-for-desktop4.png" alt="AWS の公式ドキュメントを元にした回答" /></p>]]></content><author><name>saasan</name></author><category term="blog" /><category term="Claude" /><category term="AWS" /><category term="MCP" /><summary type="html"><![CDATA[MCP の使い道を調べているうちに知った AWS Documentation MCP Server が便利そうだったので使ってみた。]]></summary></entry><entry><title type="html">cloud-config で固定 IP アドレスを設定し Amazon Linux 2023 をオンプレミスの VMware ESXi サーバ上にデプロイする</title><link href="https://slx.jp/blog/2025/06/22/cloud-config%E3%81%A7%E5%9B%BA%E5%AE%9Aip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97amazon-linux-2023%E3%82%92%E3%82%AA%E3%83%B3%E3%83%97%E3%83%AC%E3%83%9F%E3%82%B9%E3%81%AEvmware-esxi%E3%82%B5%E3%83%BC%E3%83%90%E4%B8%8A%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B.html" rel="alternate" type="text/html" title="cloud-config で固定 IP アドレスを設定し Amazon Linux 2023 をオンプレミスの VMware ESXi サーバ上にデプロイする" /><published>2025-06-22T09:55:00+09:00</published><updated>2025-06-22T09:55:00+09:00</updated><id>https://slx.jp/blog/2025/06/22/cloud-config%E3%81%A7%E5%9B%BA%E5%AE%9Aip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97amazon-linux-2023%E3%82%92%E3%82%AA%E3%83%B3%E3%83%97%E3%83%AC%E3%83%9F%E3%82%B9%E3%81%AEvmware-esxi%E3%82%B5%E3%83%BC%E3%83%90%E4%B8%8A%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B</id><content type="html" xml:base="https://slx.jp/blog/2025/06/22/cloud-config%E3%81%A7%E5%9B%BA%E5%AE%9Aip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97amazon-linux-2023%E3%82%92%E3%82%AA%E3%83%B3%E3%83%97%E3%83%AC%E3%83%9F%E3%82%B9%E3%81%AEvmware-esxi%E3%82%B5%E3%83%BC%E3%83%90%E4%B8%8A%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B.html"><![CDATA[<p>AWS の公式ドキュメントが分かりづらい上に面倒な手順となっているため、
簡単にデプロイできる手順をメモしておく。</p>

<h2 id="amazon-linux-2023-ova-ファイルのダウンロード">Amazon Linux 2023 OVA ファイルのダウンロード</h2>

<p><a href="https://docs.aws.amazon.com/ja_jp/linux/al2023/ug/outside-ec2-download.html" target="_blank">KVM、VMware、Hyper-V で使用する Amazon Linux 2023 イメージをダウンロードする - Amazon Linux 2023</a>
に書かれている
<a href="https://cdn.amazonlinux.com/al2023/os-images/latest/" target="_blank">cdn.amazonlinux.com</a>
から VMware 用の OVA ファイルをダウンロードする。</p>

<h2 id="ovftool-のダウンロードとインストール">ovftool のダウンロードとインストール</h2>

<p><a href="https://developer.broadcom.com/tools/open-virtualization-format-ovf-tool/latest" target="_blank">ovftool</a>
をダウンロード・展開しパスを通しておく。
base64 コマンドを使用するため、Windows 環境の場合は WSL に Linux 版を入れいると楽。</p>

<h2 id="cloud-config-ファイルの準備">cloud-config ファイルの準備</h2>

<p><a href="https://docs.aws.amazon.com/ja_jp/linux/al2023/ug/seed-iso.html" target="_blank">公式の手順</a>
だと <code class="language-plaintext highlighter-rouge">meta-data</code>, <code class="language-plaintext highlighter-rouge">user-data</code>, <code class="language-plaintext highlighter-rouge">network-config</code> の3ファイルを用意し
<code class="language-plaintext highlighter-rouge">seed.iso</code> ディスクイメージを作成するが、
<code class="language-plaintext highlighter-rouge">network-config</code> と <code class="language-plaintext highlighter-rouge">seed.iso</code> は不要。</p>

<p>以下のように <code class="language-plaintext highlighter-rouge">meta-data</code> と <code class="language-plaintext highlighter-rouge">user-data</code> を作成し、
<code class="language-plaintext highlighter-rouge">meta-data</code> にネットワーク設定を記載すればよい。</p>

<p>meta-data.yaml</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#cloud-config</span>
<span class="na">local-hostname</span><span class="pi">:</span> <span class="s">al2023-server</span>

<span class="na">network</span><span class="pi">:</span>
  <span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">ethernets</span><span class="pi">:</span>
    <span class="na">ens192</span><span class="pi">:</span>
      <span class="na">addresses</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">192.168.1.100/24</span>
      <span class="na">routes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span> <span class="s">0.0.0.0/0</span>
          <span class="na">via</span><span class="pi">:</span> <span class="s">192.168.1.1</span>
      <span class="na">nameservers</span><span class="pi">:</span>
        <span class="na">addresses</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">8.8.8.8</span>
          <span class="pi">-</span> <span class="s">8.8.4.4</span>
</code></pre></div></div>

<p>user-data.yaml</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#cloud-config</span>
<span class="na">users</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">default</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ec2-user</span>
    <span class="na">sudo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ALL=(ALL)</span><span class="nv"> </span><span class="s">NOPASSWD:ALL"</span>
    <span class="na">groups</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">wheel</span><span class="pi">,</span> <span class="nv">adm</span><span class="pi">,</span> <span class="nv">systemd-journal</span><span class="pi">]</span>
    <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ssh-rsa ssh-key</span>

<span class="na">timezone</span><span class="pi">:</span> <span class="s">Asia/Tokyo</span>
<span class="na">locale</span><span class="pi">:</span> <span class="s">ja_JP.UTF-8</span>
</code></pre></div></div>

<h2 id="ovftool-を使用したデプロイ">ovftool を使用したデプロイ</h2>

<p>仮想マシンの構成パラメータ <code class="language-plaintext highlighter-rouge">guestinfo.metadata</code> 等に作成済みの cloud-config を指定し、
ovftool で OVA ファイルを ESXi サーバにデプロイする。</p>

<p><code class="language-plaintext highlighter-rouge">guestinfo.metadata</code> 等は <code class="language-plaintext highlighter-rouge">--extraConfig</code> を使用して指定する。
AI に聞くと <code class="language-plaintext highlighter-rouge">--prop</code> で指定する方法を提案されるがそれは誤り。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ovftool <span class="se">\</span>
  <span class="nt">--name</span><span class="o">=</span>al2023-server <span class="se">\</span>
  <span class="nt">--datastore</span><span class="o">=</span>datastore1 <span class="se">\</span>
  <span class="nt">--diskMode</span><span class="o">=</span>thin <span class="se">\</span>
  <span class="nt">--network</span><span class="o">=</span><span class="s2">"VM Network"</span> <span class="se">\</span>
  <span class="nt">--allowExtraConfig</span> <span class="se">\</span>
  <span class="nt">--extraConfig</span>:guestinfo.metadata<span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">base64</span> <span class="nt">-w0</span> meta-data.yaml<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--extraConfig</span>:guestinfo.metadata.encoding<span class="o">=</span><span class="s2">"base64"</span> <span class="se">\</span>
  <span class="nt">--extraConfig</span>:guestinfo.userdata<span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">base64</span> <span class="nt">-w0</span> user-data.yaml<span class="si">)</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--extraConfig</span>:guestinfo.userdata.encoding<span class="o">=</span><span class="s2">"base64"</span> <span class="se">\</span>
  <span class="nt">--powerOn</span> <span class="se">\</span>
  al2023-vmware_esx-2023.7.20250609.0-kernel-6.1-x86_64.xfs.gpt.ova <span class="se">\</span>
  <span class="s1">'vi://&lt;YOUR_USER&gt;@&lt;ESXI_HOST_IP&gt;'</span>
</code></pre></div></div>]]></content><author><name>saasan</name></author><category term="blog" /><category term="VMware" /><category term="ESXi" /><category term="Amazon Linux 2023" /><category term="cloud-config" /><summary type="html"><![CDATA[AWS の公式ドキュメントが分かりづらい上に面倒な手順となっているため、 簡単にデプロイできる手順をメモしておく。]]></summary></entry><entry><title type="html">VMware ESXi 上に Flatcar Container Linux のサーバを立てる</title><link href="https://slx.jp/blog/2025/03/22/vmware-esxi%E4%B8%8A%E3%81%ABflatcar-container-linux%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%8B.html" rel="alternate" type="text/html" title="VMware ESXi 上に Flatcar Container Linux のサーバを立てる" /><published>2025-03-22T23:55:00+09:00</published><updated>2025-03-22T23:55:00+09:00</updated><id>https://slx.jp/blog/2025/03/22/vmware-esxi%E4%B8%8A%E3%81%ABflatcar-container-linux%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%8B</id><content type="html" xml:base="https://slx.jp/blog/2025/03/22/vmware-esxi%E4%B8%8A%E3%81%ABflatcar-container-linux%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%8B.html"><![CDATA[<p>ChatGPT に Docker コンテナの実行・運用に最適な OS を聞いたところ、
その中のひとつに「Flatcar Container Linux」があった。
気になったのでとりあえず VMware ESXi 上にサーバを立ててみた。</p>

<h2 id="flatcar-container-linux-とは">Flatcar Container Linux とは？</h2>

<p>Flatcar Container Linux は、コンテナの運用に特化した軽量 Linux ディストリビューションである。
自動更新機能を備え、シンプルな構成でセキュリティと安定性を重視している。</p>

<h3 id="特徴">特徴</h3>

<ul>
  <li><strong>自動アップデート</strong>: システムのアップデートが自動で適用され、セキュリティと安定性を確保する。</li>
  <li><strong>イミュータブルな設計</strong>: ルートファイルシステムが書き換え不可のため、一貫性が保たれ、運用時のトラブルを低減できる。</li>
</ul>

<p>本記事では、VMware ESXi 上に Flatcar Container Linux を導入する手順を解説する。</p>

<h2 id="事前準備">事前準備</h2>

<p>作業 PC にて事前に以下を準備しておく。</p>

<h3 id="vmware-用-ova-ファイルのダウンロード">VMware 用 OVA ファイルのダウンロード</h3>

<p>OVA ファイルのダウンロード元は、以下の公式ドキュメントに書かれている。</p>

<ul>
  <li><a href="https://www.flatcar.org/docs/latest/installing/cloud/vmware/" target="_blank">Running Flatcar Container Linux on VMware</a></li>
</ul>

<h3 id="ovftool-のインストール">ovftool のインストール</h3>

<p>仮想マシン作成時に Base64 エンコードした設定ファイルを指定する必要がある。
GUI でも構築可能だが、CLI で ovftool を使用したほうが楽。</p>

<h2 id="butane-設定ファイルを作成">Butane 設定ファイルを作成</h2>

<p>Butane 設定ファイル (<code class="language-plaintext highlighter-rouge">butane_config.yaml</code>) を作成する。
以下は静的 IP アドレスとホスト名、SSH 公開鍵の設定例である。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variant</span><span class="pi">:</span> <span class="s">flatcar</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">1.0.0</span>
<span class="na">storage</span><span class="pi">:</span>
  <span class="na">files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/systemd/network/00-static.network</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="m">0644</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">inline</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">[Match]</span>
          <span class="s">Name=ens192</span>
          <span class="s">[Network]</span>
          <span class="s">Address=192.168.xxx.xxx/24</span>
          <span class="s">Gateway=192.168.xxx.xxx</span>
          <span class="s">DNS=192.168.xxx.xxx</span>
          <span class="s">LinkLocalAddressing=no</span>
          <span class="s">IPv6AcceptRA=no</span>

    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/hostname</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="m">0644</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">inline</span><span class="pi">:</span> <span class="s">ホスト名</span>

<span class="na">passwd</span><span class="pi">:</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">core</span>
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">SSH公開鍵</span>
</code></pre></div></div>

<h2 id="ignition-設定ファイルへトランスパイル">Ignition 設定ファイルへトランスパイル</h2>

<p>Butane 設定ファイルを Ignition 設定ファイル (<code class="language-plaintext highlighter-rouge">ignition_config.json</code>) へ変換する。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--interactive</span> <span class="nt">--rm</span> quay.io/coreos/butane:release <span class="nt">--pretty</span> <span class="nt">--strict</span> &lt; butane_config.yaml <span class="o">&gt;</span> ignition_config.json
</code></pre></div></div>

<h2 id="ignition-設定ファイルを検証">Ignition 設定ファイルを検証</h2>

<p>変換した <code class="language-plaintext highlighter-rouge">ignition_config.json</code> を検証する。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--pull</span><span class="o">=</span>always <span class="nt">--rm</span> <span class="nt">-i</span> quay.io/coreos/ignition-validate:release - &lt; ignition_config.json
</code></pre></div></div>

<h2 id="ovftool-で-ignition-設定ファイルを指定して起動">ovftool で Ignition 設定ファイルを指定して起動</h2>

<p>作業 PC にて ovftool を実行する。
オプションとして Ignition 設定ファイルを指定し
ESXi サーバ上で仮想マシンを作成・起動する。</p>

<p><code class="language-plaintext highlighter-rouge">vi:///～</code> は デプロイ先の ESXi サーバの情報。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ovftool <span class="nt">--name</span><span class="o">=</span>testvm <span class="se">\</span>
  <span class="nt">--skipManifestCheck</span> <span class="nt">--noSSLVerify</span> <span class="se">\</span>
  <span class="nt">--datastore</span><span class="o">=</span>datastore1 <span class="nt">--powerOn</span><span class="o">=</span>True <span class="se">\</span>
  <span class="nt">--net</span>:<span class="s2">"VM Network=VM Network"</span> <span class="nt">--X</span>:waitForIp <span class="se">\</span>
  <span class="nt">--overwrite</span> <span class="nt">--powerOffTarget</span> <span class="se">\</span>
  <span class="nt">--X</span>:guest:ignition.config.data<span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>ignition_config.json | <span class="nb">base64</span> <span class="nt">--wrap</span><span class="o">=</span>0<span class="si">)</span> <span class="se">\</span>
  <span class="nt">--X</span>:guest:ignition.config.data.encoding<span class="o">=</span><span class="nb">base64</span> <span class="se">\</span>
  ./flatcar_production_vmware_ova.ova <span class="se">\</span>
  <span class="s1">'vi:///&lt;YOUR_USER&gt;@&lt;ESXI_HOST_IP&gt;'</span>
</code></pre></div></div>

<p>コンソール上に設定した IP アドレスが表示されていれば OK。
SSH で接続し <code class="language-plaintext highlighter-rouge">docker</code> コマンドも実行できた。</p>

<h2 id="docker-compose-を含めたサーバの構築">Docker Compose を含めたサーバの構築</h2>

<p>標準状態では Docker Compose が含まれていなかった。</p>

<p>Flatcar では <code class="language-plaintext highlighter-rouge">systemd-sysext</code> を利用して機能を拡張する仕組みになっている。
Docker Compose を利用するには、以下の公式ドキュメントを参考に Butane 設定ファイルを変更する。</p>

<ul>
  <li><a href="https://flatcar.github.io/sysext-bakery/docker_compose/" target="_blank">Docker-compose sysext | sysext-bakery</a></li>
</ul>

<p>また、利用可能な Docker Compose のバージョンは以下で確認できる。</p>

<ul>
  <li><a href="https://github.com/flatcar/sysext-bakery/releases/tag/docker-compose" target="_blank">Release docker-compose · flatcar/sysext-bakery</a></li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variant</span><span class="pi">:</span> <span class="s">flatcar</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">1.0.0</span>
<span class="na">storage</span><span class="pi">:</span>
  <span class="na">files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/systemd/network/00-static.network</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="m">0644</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">inline</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">[Match]</span>
          <span class="s">Name=ens192</span>
          <span class="s">[Network]</span>
          <span class="s">Address=192.168.xxx.xxx/24</span>
          <span class="s">Gateway=192.168.xxx.xxx</span>
          <span class="s">DNS=192.168.xxx.xxx</span>
          <span class="s">LinkLocalAddressing=no</span>
          <span class="s">IPv6AcceptRA=no</span>

    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/hostname</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="m">0644</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">inline</span><span class="pi">:</span> <span class="s">ホスト名</span>

    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/opt/extensions/docker-compose/docker-compose-2.34.0-x86-64.raw</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="m">0644</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">source</span><span class="pi">:</span> <span class="s">https://extensions.flatcar.org/extensions/docker-compose-2.34.0-x86-64.raw</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/sysupdate.docker-compose.d/docker-compose.conf</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">source</span><span class="pi">:</span> <span class="s">https://extensions.flatcar.org/extensions/docker-compose.conf</span>
    <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/sysupdate.d/noop.conf</span>
      <span class="na">contents</span><span class="pi">:</span>
        <span class="na">source</span><span class="pi">:</span> <span class="s">https://extensions.flatcar.org/extensions/noop.conf</span>

  <span class="na">links</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">target</span><span class="pi">:</span> <span class="s">/opt/extensions/docker-compose/docker-compose-2.34.0-x86-64.raw</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">/etc/extensions/docker-compose.raw</span>
      <span class="na">hard</span><span class="pi">:</span> <span class="kc">false</span>

<span class="na">systemd</span><span class="pi">:</span>
  <span class="na">units</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">systemd-sysupdate.timer</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">systemd-sysupdate.service</span>
      <span class="na">dropins</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">docker-compose.conf</span>
          <span class="na">contents</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">[Service]</span>
            <span class="s">ExecStartPre=/usr/bin/sh -c "readlink --canonicalize /etc/extensions/docker-compose.raw &gt; /tmp/docker-compose"</span>
            <span class="s">ExecStartPre=/usr/lib/systemd/systemd-sysupdate -C docker-compose update</span>
            <span class="s">ExecStartPost=/usr/bin/sh -c "readlink --canonicalize /etc/extensions/docker-compose.raw &gt; /tmp/docker-compose-new"</span>
            <span class="s">ExecStartPost=/usr/bin/sh -c "if ! cmp --silent /tmp/docker-compose /tmp/docker-compose-new; then touch /run/reboot-required; fi"</span>

<span class="na">passwd</span><span class="pi">:</span>
  <span class="na">users</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">core</span>
      <span class="na">ssh_authorized_keys</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">SSH公開鍵</span>
</code></pre></div></div>

<p>先ほど作成した仮想マシンを削除し再構築したところ、
無事 Docker Compose が利用できる環境ができあがった。</p>

<h2 id="参考サイト">参考サイト</h2>

<ul>
  <li><a href="https://www.flatcar.org/docs/latest/installing/cloud/vmware/" target="_blank">Running Flatcar Container Linux on VMware</a></li>
  <li><a href="https://coreos.github.io/ignition/getting-started/#config-validation" target="_blank">Getting Started | Ignition</a></li>
  <li><a href="https://coreos.github.io/butane/getting-started/" target="_blank">Getting started | Butane</a></li>
  <li><a href="https://www.flatcar.org/docs/latest/setup/customization/network-config-with-networkd/" target="_blank">Network configuration with networkd</a></li>
  <li><a href="https://www.flatcar.org/docs/latest/provisioning/config-transpiler/" target="_blank">Butane Config Transpiler</a></li>
  <li><a href="https://flatcar.github.io/sysext-bakery/docker_compose/" target="_blank">Docker-compose sysext | sysext-bakery</a></li>
  <li><a href="https://github.com/flatcar/sysext-bakery/releases/tag/docker-compose" target="_blank">Release docker-compose · flatcar/sysext-bakery</a></li>
</ul>]]></content><author><name>saasan</name></author><category term="blog" /><category term="VMware" /><category term="ESXi" /><category term="Flatcar Container Linux" /><summary type="html"><![CDATA[VMware ESXi 上に Flatcar Container Linux のサーバを立てた際のメモ]]></summary></entry><entry><title type="html">Windows 11 の WSL で ext4 ファイルシステムのドライブの内容を確認する</title><link href="https://slx.jp/blog/2025/02/23/windows-11%E3%81%AEWSL%E3%81%A7ext4%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B.html" rel="alternate" type="text/html" title="Windows 11 の WSL で ext4 ファイルシステムのドライブの内容を確認する" /><published>2025-02-23T03:20:00+09:00</published><updated>2025-02-23T03:20:00+09:00</updated><id>https://slx.jp/blog/2025/02/23/windows-11%E3%81%AEWSL%E3%81%A7ext4%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B</id><content type="html" xml:base="https://slx.jp/blog/2025/02/23/windows-11%E3%81%AEWSL%E3%81%A7ext4%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B.html"><![CDATA[<p><a href="https://learn.microsoft.com/ja-jp/windows/wsl/wsl2-mount-disk" target="_blank">WSL 2 で Linux ディスクのマウントを開始する</a>
の内容を自分用にまとめたやつ</p>

<ol>
  <li>
    <p>PowerShell でドライブを確認</p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GET-CimInstance</span><span class="w"> </span><span class="nt">-query</span><span class="w"> </span><span class="s2">"SELECT * from Win32_DiskDrive"</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>PowerShell でドライブをマウント (要管理者権限)</p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl</span><span class="w"> </span><span class="nt">--mount</span><span class="w"> </span><span class="nx">\\.\PHYSICALDRIVE5</span><span class="w"> </span><span class="nt">--bare</span><span class="w">
</span></code></pre></div>    </div>

    <p>PHYSICALDRIVE5 は確認したいドライブ</p>
  </li>
  <li>
    <p>WSL 内でパーティション番号とファイルシステムを確認</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsblk <span class="nt">-f</span>
<span class="nb">sudo </span>blkid
</code></pre></div>    </div>
  </li>
  <li>
    <p>PowerShell でパーティションをマウント</p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl</span><span class="w"> </span><span class="nt">--mount</span><span class="w"> </span><span class="nx">\\.\PHYSICALDRIVE5</span><span class="w"> </span><span class="nt">--partition</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nt">--type</span><span class="w"> </span><span class="nx">ext4</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>WSL 内でパーティションをマウント</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /mnt/external
<span class="nb">sudo </span>mount /dev/sdf1 /mnt/external
</code></pre></div>    </div>

    <p>sdf1 は確認したいパーティション</p>
  </li>
  <li>
    <p>ドライブの内容を確認</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> /mnt/external
</code></pre></div>    </div>
  </li>
  <li>
    <p>WSL 内でマウント解除</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>umount /mnt/external
<span class="nb">ls</span> /mnt/external
</code></pre></div>    </div>
  </li>
  <li>
    <p>PowerShell でマウント解除 (要管理者権限)</p>

    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wsl.exe</span><span class="w"> </span><span class="nt">--unmount</span><span class="w"> </span><span class="nx">\\.\PHYSICALDRIVE5</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>saasan</name></author><category term="blog" /><category term="Windows" /><category term="WSL" /><summary type="html"><![CDATA[WSL 2 で Linux ディスクのマウントを開始する の内容を自分用にまとめたやつ]]></summary></entry><entry><title type="html">【2024年最新版】今年買ってよかったもの</title><link href="https://slx.jp/blog/2024/12/31/2024%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88-%E4%BB%8A%E5%B9%B4%E8%B2%B7%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE.html" rel="alternate" type="text/html" title="【2024年最新版】今年買ってよかったもの" /><published>2024-12-31T08:30:00+09:00</published><updated>2024-12-31T08:30:00+09:00</updated><id>https://slx.jp/blog/2024/12/31/%E3%80%902024%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88%E3%80%91%E4%BB%8A%E5%B9%B4%E8%B2%B7%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE</id><content type="html" xml:base="https://slx.jp/blog/2024/12/31/2024%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88-%E4%BB%8A%E5%B9%B4%E8%B2%B7%E3%81%A3%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE.html"><![CDATA[<p>1年以上このサイトを放置してたんで更新方法すら忘れてる感があるが、
今年買ってよかったものを羅列していく。</p>

<h2 id="skagen-jorn-hybrid-hr-スマートウォッチ-skt3000">SKAGEN JORN HYBRID HR スマートウォッチ SKT3000</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B08RDJSZ71?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/81pMxAixRUL._AC_SX679_.jpg" alt="[スカーゲン] 腕時計 JORN 42MM HYBRID HR SKT3000 メンズ ブラウン" />
        <span class="affiliate-product-name">[スカーゲン] 腕時計 JORN 42MM HYBRID HR SKT3000 メンズ ブラウン</span>
    </a>
</div>

<p>今年一番買ってよかったやつ。
アナログ腕時計の文字盤が電子ペーパーになってるタイプのスマートウォッチ。</p>

<ul>
  <li>良い点
    <ul>
      <li>見た目が普通の腕時計</li>
      <li>スマホの通知確認、アラームに使えて便利</li>
      <li>電子ペーパーのためバッテリーが数週間もつ</li>
    </ul>
  </li>
  <li>悪い点
    <ul>
      <li>電子ペーパーのため画面の更新は若干もたつく (画面が小さいこともあり1秒もかからないが)</li>
      <li>タッチパネルではないため、側面にある3つのボタンでの操作が必要
        <ul>
          <li>ボタンを押し込む際の荷重は軽めで 3mm ほど出っ張っている</li>
          <li>手の甲などにあたって画面が勝手に変わっていることがある</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">先日買ったハイブリッドスマートウォッチのベルト交換してきた <a href="https://t.co/8iD071xftc">pic.twitter.com/8iD071xftc</a></p>&mdash; カガミ (@saasan) <a href="https://twitter.com/saasan/status/1788145173278691625?ref_src=twsrc%5Etfw">May 8, 2024</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="エレコム-bluetooth50-マウス-ex-g-pro-lサイズ-m-xgl50mbskbk">エレコム Bluetooth5.0 マウス EX-G PRO Lサイズ M-XGL50MBSKBK</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B0CGWN5V9N/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/71lZi6zwg1L._AC_SX679_.jpg" alt="エレコム ワイヤレスマウス 静音 EX-G PRO Lサイズ Bluetooth 無線2.4GHz 両対応 充電式 8ボタン 高速スクロール チルトホイール 抗菌 ブラック M-XGL50MBSKBK" />
        <span class="affiliate-product-name">エレコム ワイヤレスマウス 静音 EX-G PRO Lサイズ Bluetooth 無線2.4GHz 両対応 充電式 8ボタン 高速スクロール チルトホイール 抗菌 ブラック M-XGL50MBSKBK</span>
    </a>
</div>

<p>長年使ってた Microsoft Sculpt Ergonomic Mouse が廃番になっていたため乗り換え</p>

<ul>
  <li>良い点
    <ul>
      <li>高さがあり持ちやすい</li>
      <li>M、XL サイズも試したが、L サイズの握り心地が一番良かった</li>
      <li>ボタン数多め</li>
    </ul>
  </li>
  <li>悪い点
    <ul>
      <li>充電式のバッテリーは数日しかもたないため、頻繁に充電が必要</li>
      <li>中クリック(ホイールクリック)がかなり固くて押しづらい</li>
      <li>充電ケーブルの差込口が狭く、付属の USB Type-C ケーブルでしか充電できない</li>
    </ul>
  </li>
</ul>

<h2 id="電動空気入れ-panp-ride-mini">電動空気入れ PANP RIDE MINI</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B0D7MMH36N/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/61csfSJXeKL._AC_SY879_.jpg" alt="PANP RIDE MINI 空気入れ 自転車 ロードバイク ツーリング 日本 メーカー (全バルブ対応) 米式 英式 仏式 バイク ボール 電動空気入れ 自動 軽量 小型コンパクト エアコンプレッサー KUKIIRE スマート空気入れ【保証2年間】" />
        <span class="affiliate-product-name">PANP RIDE MINI 空気入れ 自転車 ロードバイク ツーリング 日本 メーカー (全バルブ対応) 米式 英式 仏式 バイク ボール 電動空気入れ 自動 軽量 小型コンパクト エアコンプレッサー KUKIIRE スマート空気入れ【保証2年間】</span>
    </a>
</div>

<p>ボタンを押すだけで、事前に設定しておいた空気圧まで自動で空気が入る。便利。</p>

<h2 id="créer-人感センサーライト">créer 人感センサーライト</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B0B11ZVBQ5/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/61Pzaizi-nL._AC_SX679_.jpg" alt="créer(クレエ) 人感 センサーライト 室内 【PSE取得済】 明るさ調節(10段階)・点灯時間設定可能/足元灯 コンセント式 省エネ フットライト 電球色 暖色/白色 照明 (ホワイト)" />
        <span class="affiliate-product-name">créer(クレエ) 人感 センサーライト 室内 【PSE取得済】 明るさ調節(10段階)・点灯時間設定可能/足元灯 コンセント式 省エネ フットライト 電球色 暖色/白色 照明 (ホワイト)</span>
    </a>
</div>

<p>廊下にこれを付けたら、夜中にトイレへ行く際などわざわざ照明をつけなくてもよくなった。
コンセント式なので電池交換の手間もない。</p>

<h2 id="マキタ-携帯電話ホルダー-a-73162">マキタ 携帯電話ホルダー A-73162</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B0BZCXXQPB/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/81HJjeNtTbL._AC_SX679_.jpg" alt="マキタ(Makita) 携帯電話ホルダー A-73162" />
        <span class="affiliate-product-name">マキタ(Makita) 携帯電話ホルダー A-73162</span>
    </a>
</div>

<p>Galaxy Z Fold5 がデカいんで、ポケットに入れられないとき使ってる</p>

<h2 id="secrid-カードケース">Secrid カードケース</h2>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B074MN1146/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/61Iur4dn5yL._AC_SX679_.jpg" alt="Secrid (シークリッド) - ミニ 財布 本革 RFID保護 カードケース カード最大12枚用, RFID財布。, ブラックオリーブ, 21 mm" />
        <span class="affiliate-product-name">Secrid (シークリッド) - ミニ 財布 本革 RFID保護 カードケース カード最大12枚用, RFID財布。, ブラックオリーブ, 21 mm</span>
    </a>
</div>

<p>下のレバーを引くとカードが少しずつズレた状態で飛び出すので取り出しやすい</p>

<h2 id="タニタのツインスティック">タニタのツインスティック</h2>

<p>バーチャロンやるならやっぱりこれ</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">PS4発掘してバーチャロン環境整えた<br />フォースのアーケード一周プレイしてみたけど元々ツインスティック自体に重量があるのと吸盤がガラス天板の机と相性よくて安定感ある <a href="https://t.co/XmwsBOK7wE">pic.twitter.com/XmwsBOK7wE</a></p>&mdash; カガミ (@saasan) <a href="https://twitter.com/saasan/status/1816377426865447364?ref_src=twsrc%5Etfw">July 25, 2024</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="ロフトベッド">ロフトベッド</h2>

<p>物を置けるスペースが拡大したが、既に埋まってしまった</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ロフトベッドとポケットコイルマットレスの設置終わった<br />4時間くらいかかった<br />これで起きたときに身体が痛いの改善するといいんだけど <a href="https://t.co/oaUfnpqpv0">pic.twitter.com/oaUfnpqpv0</a></p>&mdash; カガミ (@saasan) <a href="https://twitter.com/saasan/status/1753680538991579183?ref_src=twsrc%5Etfw">February 3, 2024</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="にゃんぷっぷーぬいぐるみ">にゃんぷっぷーぬいぐるみ</h2>

<p>かわいい</p>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">にゃんぷっぷーぬいぐるみ届いた！ <a href="https://t.co/nGSoA3g5kp">pic.twitter.com/nGSoA3g5kp</a></p>&mdash; カガミ (@saasan) <a href="https://twitter.com/saasan/status/1853768089244250293?ref_src=twsrc%5Etfw">November 5, 2024</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content><author><name>saasan</name></author><category term="blog" /><category term="ガジェット" /><summary type="html"><![CDATA[2024年に買ってよかったものをご紹介]]></summary></entry><entry><title type="html">aptX Adaptive LL 対応 Bluetooth 機器で PC ゲームに使える完全ワイヤレスなオーディオ環境構築</title><link href="https://slx.jp/blog/2023/08/14/aptx-adaptive-ll%E5%AF%BE%E5%BF%9Cbluetooth%E6%A9%9F%E5%99%A8%E3%81%A7pc%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E5%AE%8C%E5%85%A8%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9%E3%81%AA%E3%82%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%82%AA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html" rel="alternate" type="text/html" title="aptX Adaptive LL 対応 Bluetooth 機器で PC ゲームに使える完全ワイヤレスなオーディオ環境構築" /><published>2023-08-14T23:07:00+09:00</published><updated>2023-08-14T23:07:00+09:00</updated><id>https://slx.jp/blog/2023/08/14/aptx-adaptive-ll%E5%AF%BE%E5%BF%9Cbluetooth%E6%A9%9F%E5%99%A8%E3%81%A7pc%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E5%AE%8C%E5%85%A8%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9%E3%81%AA%E3%82%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%82%AA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89</id><content type="html" xml:base="https://slx.jp/blog/2023/08/14/aptx-adaptive-ll%E5%AF%BE%E5%BF%9Cbluetooth%E6%A9%9F%E5%99%A8%E3%81%A7pc%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E5%AE%8C%E5%85%A8%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9%E3%81%AA%E3%82%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%82%AA%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89.html"><![CDATA[<p>PC でゲームをしたり音楽を聞いたりする際に有線のイヤホンを使用していたが、
ケーブルが煩わしく感じていたのでゲームに使える完全ワイヤレスイヤホンを探すことにした。</p>

<h2 id="aptx-ll-と-aptx-adaptive">aptX LL と aptX Adaptive</h2>

<p>ある程度汎用的に使える Bluetooth 接続のものにしたいが、
Bluetooth のプロファイル A2DP で標準のコーデック SBC は音声の遅延が大きい。
ゲームに向いた低遅延のコーデックについて調べたところ、
aptX LL (Low Latency) と aptX Adaptive という規格があるらしい。</p>

<p>aptX LL は名前通り低遅延なコーデック、
aptX Adaptive はローレイテンシー (LL) モードとハイクオリティ (HQ) モードを切替可能。
aptX Adaptive の方が新しいコーデックだが、
aptX Adaptive のローレイテンシーモードよりも aptX LL の方が規格上の遅延は少ない。</p>

<p>よって、aptX LL 対応の機器を買おうとネット上で調べたり某家電量販店で探したが、
aptX LL 対応の機器が少なくいいものが見つからなかった。</p>

<h2 id="creative-bt-w5-と-earfun-air-pro-3-を購入">Creative BT-W5 と EarFun Air Pro 3 を購入</h2>

<p>結局 aptX Adaptive 対応の USB アダプタ
<a href="https://jp.creative.com/p/accessories/creative-bt-w5" target="_blank">Creative BT-W5</a> と
完全ワイヤレスイヤホン EarFun Air Pro 3 を購入した。</p>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B0B1J2WTB2?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/41V33CRpvGL._AC_SY355_.jpg" alt="Creative BT-W4 Bluetooth トランスミッター USB オーディオ/チャット用アナログマイク付 aptX Adaptiveモデル HP-BTW4" />
        <span class="affiliate-product-name">Creative BT-W4 Bluetooth トランスミッター USB オーディオ/チャット用アナログマイク付 aptX Adaptiveモデル HP-BTW4</span>
    </a>
    <a href="https://www.amazon.co.jp/dp/B0BNQ611R2?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/51mtle79kTL._AC_SX522_.jpg" alt="【VGP金賞】EarFun Air Pro 3 ANC搭載完全ワイヤレスイヤホン【Bluetooth 5.3 + 43dBまでノイズキャンセリング】QCC3071チップ搭載/aptX adaptive対応/超低遅延55ms/マルチポイント接続/専用アプリ/cVc8.0通話ノイズリダクション/最大45時間再生/ワイヤレス充電/IPX5防水(ブラック)" />
        <span class="affiliate-product-name">【VGP金賞】EarFun Air Pro 3 ANC搭載完全ワイヤレスイヤホン【Bluetooth 5.3 + 43dBまでノイズキャンセリング】QCC3071チップ搭載/aptX adaptive対応/超低遅延55ms/マルチポイント接続/専用アプリ/cVc8.0通話ノイズリダクション/最大45時間再生/ワイヤレス充電/IPX5防水(ブラック)</span>
    </a>
</div>

<p>BT-W5 は発売時の記事が印象に残っていたのと、
Sound Blaster 等 PC 用サウンド系パーツの老舗メーカーという安心感から選択。</p>

<p>クリエイティブストアのみでの販売なので、上のリンクは旧機種の BT-W4 にしている。
BT-W5 との違いは aptX HD、24bit/96kHz への対応の有無なので低遅延が目的ならどちらでもいい。</p>

<p>EarFun Air Pro 3 を選んだ理由は、1万円以下の完全ワイヤレスイヤホンで評判が良かったため。</p>

<p><a href="https://av.watch.impress.co.jp/docs/topic/special/1500373.html">迫力サウンドと強力NCで8,990円! 信じられない超コスパTWS「EarFun Air Pro 3」 - AV Watch[Sponsored]</a></p>

<h2 id="遅延時間の確認">遅延時間の確認</h2>

<p>遅延時間の確認には
<a href="https://nullvoxpopuli.github.io/latency-tester/" target="_blank">Latency Tester</a>
を使用した。
Web サイト上で音に合わせてマウスをクリックするかスペースキーを押すことで簡易的に遅延時間を確認できる。</p>

<p>また、確認に使用した機器は以下の通り。</p>

<h3 id="アダプタ">アダプタ</h3>

<table>
  <thead>
    <tr>
      <th>アダプタ</th>
      <th>対応コーデック</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>サンワサプライ MM-BTUD43</td>
      <td>SBC, aptX</td>
    </tr>
    <tr>
      <td>Creative BT-W5</td>
      <td>SBC, aptX, aptX HD, aptX Adaptive</td>
    </tr>
  </tbody>
</table>

<h3 id="ヘッドホン--イヤホン">ヘッドホン / イヤホン</h3>

<table>
  <thead>
    <tr>
      <th>ヘッドホン / イヤホン</th>
      <th>対応コーデック</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>EarFun Air Pro 3</td>
      <td>SBC, AAC, aptX Adaptive</td>
    </tr>
    <tr>
      <td>Sony MDR-ZX770BN</td>
      <td>SBC, AAC, aptX</td>
    </tr>
    <tr>
      <td>FOSTEX TM2C</td>
      <td>SBC, AAC, aptX</td>
    </tr>
  </tbody>
</table>

<h3 id="確認結果">確認結果</h3>

<table>
  <thead>
    <tr>
      <th>アダプタ</th>
      <th>ヘッドホン / イヤホン</th>
      <th>コーデック</th>
      <th>遅延時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Creative BT-W5</td>
      <td>EarFun Air Pro 3</td>
      <td>aptX Adaptive LL</td>
      <td>100 ms</td>
    </tr>
    <tr>
      <td>サンワサプライ MM-BTUD43</td>
      <td>Sony MDR-ZX770BN</td>
      <td>aptX</td>
      <td>160 ms</td>
    </tr>
    <tr>
      <td>Creative BT-W5</td>
      <td>Sony MDR-ZX770BN</td>
      <td>SBC</td>
      <td>200 ms</td>
    </tr>
    <tr>
      <td>Creative BT-W5</td>
      <td>FOSTEX TM2C</td>
      <td>aptX</td>
      <td>335 ms</td>
    </tr>
    <tr>
      <td>Creative BT-W5</td>
      <td>EarFun Air Pro 3</td>
      <td>aptX Adaptive HQ</td>
      <td>350 ms</td>
    </tr>
  </tbody>
</table>

<p>当然だが Creative BT-W5 と EarFun Air Pro 3
の組み合わせが最も遅延が少ない結果となった。</p>

<p>実際に PSO2 を遊んでみたがアクションゲームで使用するなら特に問題なさそうだった。
音ゲーはやってないからわからない。</p>

<h2 id="問題点">問題点</h2>

<p>低遅延という点では満足な結果だったが、
それ以外の点でいくつか問題があったので書いておく。</p>

<h3 id="creative-bt-w5">Creative BT-W5</h3>

<ul>
  <li>PC からはスピーカーとして認識される</li>
  <li>よって Windows 標準の Bluetooth 設定画面からは機器との接続/切断ができず、 Creative 独自のアプリで操作する必要がある</li>
  <li>Windows 標準の Bluetooth 接続だと機器が切断されたら自動で別のスピーカー等へ音声出力が切り替わるが、それも行われないため手動で切り替えが必要</li>
  <li>音量が大きいため Windows の音量設定を 1 ～ 5% あたりまで下げる必要があり細かい音量調整が効かない</li>
</ul>

<h3 id="earfun-air-pro-3">EarFun Air Pro 3</h3>

<ul>
  <li>付属のイヤーピースが最大のものでも私には小さくはずれやすい</li>
  <li>タッチ操作のため誤タッチにより意図しない操作が発生する場合がある</li>
</ul>

<h2 id="参考サイト">参考サイト</h2>

<ul>
  <li><a href="https://uzuky.hatenablog.com/entry/20201215/1608005651" target="_blank">aptX LL / Adaptive でやる音ゲー - う！</a></li>
  <li><a href="https://androplus.org/entry/creative-bt-w5-review/" target="_blank">Creative BT-W5レビュー。aptX Adaptiveで24bit/96kHzや低遅延にできるトランスミッター - AndroPlus</a></li>
</ul>]]></content><author><name>saasan</name></author><category term="blog" /><category term="ガジェット" /><category term="PC" /><summary type="html"><![CDATA[PC でゲームをしたり音楽を聞いたりする際に有線のイヤホンを使用していたが、 ケーブルが煩わしく感じていたのでゲームに使える完全ワイヤレスイヤホンを探すことにした。]]></summary></entry><entry><title type="html">IFTTT の Twitter 連携が有料化したので Python と GitHub Actions で RSS をツイートする</title><link href="https://slx.jp/blog/2023/07/05/ifttt%E3%81%AEtwitter%E9%80%A3%E6%90%BA%E3%81%8C%E6%9C%89%E6%96%99%E5%8C%96%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7python%E3%81%A8github-actions%E3%81%A7rss%E3%82%92%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B.html" rel="alternate" type="text/html" title="IFTTT の Twitter 連携が有料化したので Python と GitHub Actions で RSS をツイートする" /><published>2023-07-05T00:20:00+09:00</published><updated>2023-07-05T00:20:00+09:00</updated><id>https://slx.jp/blog/2023/07/05/ifttt%E3%81%AEtwitter%E9%80%A3%E6%90%BA%E3%81%8C%E6%9C%89%E6%96%99%E5%8C%96%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7python%E3%81%A8github-actions%E3%81%A7rss%E3%82%92%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B</id><content type="html" xml:base="https://slx.jp/blog/2023/07/05/ifttt%E3%81%AEtwitter%E9%80%A3%E6%90%BA%E3%81%8C%E6%9C%89%E6%96%99%E5%8C%96%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7python%E3%81%A8github-actions%E3%81%A7rss%E3%82%92%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B.html"><![CDATA[<p>IFTTT で動かしてた某ゲーム公式サイトの RSS をツイートするやつが
Twitter 連携の有料化によって動かなくなったため、
GitHub Actions で自作の Python スクリプトを動かして代用することにした。</p>

<p>コードは以下のリポジトリにある。</p>

<p><a href="https://github.com/saasan/feed2tweet" target="_blank"><img src="https://github-link-card.s3.ap-northeast-1.amazonaws.com/saasan/feed2tweet.png" width="460px" /></a></p>

<h2 id="なぜ-github-actions-なのか">なぜ GitHub Actions なのか？</h2>

<ol>
  <li>Public リポジトリなら無料で利用可能</li>
  <li>定期的な実行が可能</li>
  <li>データの永続化に近いことが可能</li>
  <li>GitHub Actions の利用経験がなかったため学習用として</li>
</ol>

<p>RSS 内のどこまでツイートしたかを判別するためその情報を保存しておきたいが、
IFTTT を利用する前に調べた際は
無料で利用可能でデータの永続化が可能なサービスが見つからなかった記憶がある。</p>

<p>今回いくつかの候補の中から GitHub Actions について調べていたところ、
<a href="https://mjhd.hatenablog.com/entry/2022/06/04/104711" target="_blank">Github Actionsのcacheをデータの永続化(?)に使う - MJHD</a>
を見て cache が永続化に利用できると知り GitHub Actions を利用することとした。</p>

<h2 id="github-actions-の-cache">Github Actions の cache</h2>

<p>公式のドキュメント: 
<a href="https://docs.github.com/ja/actions/using-workflows/caching-dependencies-to-speed-up-workflows" target="_blank">依存関係をキャッシュしてワークフローのスピードを上げる - GitHub Docs</a></p>

<p>ファイルをキャッシュとして保存し、次回以降のワークフロー実行時に利用できる。</p>

<p>本来はビルドに必要なライブラリなど依存関係を保持しておき
ワークフローの実行を高速化するためのものだが、
データの永続化に利用することも可能。</p>

<p>ただし、7日間以上アクセスされていないキャッシュは削除される。容量は最大10 GB。</p>

<h2 id="キャッシュの利用方法">キャッシュの利用方法</h2>

<p>キャッシュを上書きすることはできないため、
保存時は常に新しいキャッシュを作成し、
読込時は最新のものを取得する必要がある。</p>

<p>以下のように key に新しいキーを指定することで新しいキャッシュを作成、
restore-keys に接頭辞のみ指定すると最新のものが取得できる。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">actions/cache用keyの生成</span>
  <span class="na">run</span><span class="pi">:</span> <span class="s">echo "CACHE_TIMESTAMP=$(date +%s)" &gt;&gt; "$GITHUB_ENV"</span>

<span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span>
  <span class="na">id</span><span class="pi">:</span> <span class="s">tweeted</span>
  <span class="na">with</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">./tweeted</span>
    <span class="na">key</span><span class="pi">:</span> <span class="s">tweeted-${{ env.CACHE_TIMESTAMP }}</span>
    <span class="na">restore-keys</span><span class="pi">:</span> <span class="s">tweeted-</span>
</code></pre></div></div>

<h2 id="古いキャッシュの削除">古いキャッシュの削除</h2>

<p>前述の通り放置していても古いキャッシュは7日で消えるが、
新しいものから5個を残して削除することとした。</p>

<p>GitHub CLI の <code class="language-plaintext highlighter-rouge">gh cache</code> を使用している。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cleanup cache</span>
  <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s"># 新しいものから5個を残してキャッシュ削除</span>
    <span class="s">gh cache list --key tweeted- --order asc --sort created_at --json id | \</span>
      <span class="s">jq -r '.[0:-5][].id' | \</span>
      <span class="s">xargs -r -I ID gh cache delete ID</span>
  <span class="na">env</span><span class="pi">:</span>
    <span class="na">GH_TOKEN</span><span class="pi">:</span> <span class="s">${{ secrets.GITHUB_TOKEN }}</span>
</code></pre></div></div>

<h2 id="github-actions-での定期実行に関する注意点">GitHub Actions での定期実行に関する注意点</h2>

<p>以下のように schedule で10分毎に実行する設定としたが、
<a href="https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows#schedule" target="_blank">公式のドキュメント</a>
にも書かれている通り、負荷が高い場合は遅延したりそもそも実行されない場合がある。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3-59/10</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span>
</code></pre></div></div>

<p>実際半日で72回ほど動くはずが53回しか動いていなかった。
確実に動かしたいものは避けたほうがよい。</p>]]></content><author><name>saasan</name></author><category term="blog" /><category term="Twitter" /><category term="Python" /><category term="GitHub Actions" /><summary type="html"><![CDATA[Github Actions の cache をデータの永続化に使う]]></summary></entry><entry><title type="html">Stable Diffusion を Windows 10 へインストールする方法と使い方、画像生成のコツ</title><link href="https://slx.jp/blog/2023/03/06/stable-diffusion%E3%82%92windows-10%E3%81%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9-%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84.html" rel="alternate" type="text/html" title="Stable Diffusion を Windows 10 へインストールする方法と使い方、画像生成のコツ" /><published>2023-03-06T15:15:00+09:00</published><updated>2023-03-06T15:15:00+09:00</updated><id>https://slx.jp/blog/2023/03/06/stable-diffusion%E3%82%92windows-10%E3%81%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9%E3%80%81%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84</id><content type="html" xml:base="https://slx.jp/blog/2023/03/06/stable-diffusion%E3%82%92windows-10%E3%81%B8%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95%E3%81%A8%E4%BD%BF%E3%81%84%E6%96%B9-%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90%E3%81%AE%E3%82%B3%E3%83%84.html"><![CDATA[<p>Stable Diffusion を Windows 10 のローカル環境へインストールする方法と使い方、
1ヶ月ほど使ってみて分かった画像生成のコツをメモしておく。</p>

<h2 id="実行環境">実行環境</h2>

<ul>
  <li>Windows 10 Pro 22H2</li>
  <li>GPU: <a href="https://www.amazon.co.jp/dp/B08WPJ5P4R/?tag=saasan-22" target="_blank">MSI GeForce RTX 3060 GAMING X 12G</a> (VRAM 12 GB 版 NVIDIA GeForce RTX 3060)</li>
  <li>CPU: <a href="https://www.amazon.co.jp/dp/B08166SLDF/?tag=saasan-22" target="_blank">AMD Ryzen 5 5600X</a></li>
  <li>メモリ: 32 GB</li>
</ul>

<div class="affiliate-product-list">
    <a href="https://www.amazon.co.jp/dp/B08WPJ5P4R/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/811sBakp3+L._AC_SX355_.jpg" alt="MSI GeForce RTX 3060 GAMING X 12G グラフィックスボード VD7552" />
        <span class="affiliate-product-name">MSI GeForce RTX 3060 GAMING X 12G グラフィックスボード VD7552</span>
    </a>
    <a href="https://www.amazon.co.jp/dp/B08166SLDF/?tag=saasan-22" class="affiliate-product">
        <img src="https://m.media-amazon.com/images/I/51ld6RR8IrL._AC_SY450_.jpg" alt="AMD Ryzen 5 5600X with Wraith Stealth cooler 3.7GHz 6コア / 12スレッド 35MB 65W【国内正規代理店品】 100-100000065BOX" />
        <span class="affiliate-product-name">AMD Ryzen 5 5600X with Wraith Stealth cooler 3.7GHz 6コア / 12スレッド 35MB 65W【国内正規代理店品】 100-100000065BOX</span>
    </a>
</div>

<p>ドライバー等は最新のものを使用。
あくまでも私が実行した環境のためこのスペックを満たしている必要はない。</p>

<p>Stable Diffusion web UI は VRAM 4 GB 以上をサポートしているが、
GPU と VRAM の容量は画像生成速度と解像度に影響するため高性能なものが望ましい。</p>

<p>また、Stable Diffusion は NVIDIA 製 GPU で動かす前提となっている。
AMD や Intel 製 GPU に対応させたものもあるようだが以下の手順では使えない。</p>

<h2 id="cuda-toolkit-のインストール">CUDA Toolkit のインストール</h2>

<p>Stable Diffusion に限らず、NVIDIA の GPU で機械学習やディープラーニングを行うには
CUDA という並列計算のライブラリが必要。</p>

<p><a href="https://developer.nvidia.com/cuda-downloads" target="_blank">NVIDIA の公式サイト</a>
から CUDA Toolkit をダウンロードしインストールする。</p>

<h2 id="python-git-のインストール">Python, Git のインストール</h2>

<p>Stable Diffusion web UI (以下 web UI と略す) を利用するのが楽なので、
これを動かすのに必要な Python, Git をインストールする。</p>

<h3 id="python-のインストール">Python のインストール</h3>

<p><strong>3.11 系では web UI が動作しないため必ず 3.10 系をインストールすること。</strong></p>

<ol>
  <li><a href="https://www.python.org/downloads/windows/" target="_blank">Python の公式サイト</a> から Python 3.10.x をダウンロードする。<br />
現在は 3.10.10 が最新のため「Stable Releases」の「Python 3.10.10 - Feb. 8, 2023」にある
「Windows installer (64-bit)」をクリックしてダウンロードすればよい。</li>
  <li>ダウンロードしたファイルをダブルクリックしてインストーラーを起動する。</li>
  <li><strong>「Add python.exe to PATH」にチェックを入れる。</strong></li>
  <li>「Install Now」をクリックしインストールする。</li>
</ol>

<h3 id="git-のインストール">Git のインストール</h3>

<ol>
  <li><a href="https://git-scm.com/download/win" target="_blank">Git の公式サイト</a> から 64-bit Git for Windows Setup をダウンロードする。</li>
  <li>ダウンロードしたファイルをダブルクリックしてインストーラーを起動する。</li>
  <li>英語で色々聞かれるが全部「Next」をクリックして進める。</li>
  <li>最後に「Install」すればとりあえず使える状態になる。</li>
</ol>

<h2 id="stable-diffusion-web-ui-のインストール">Stable Diffusion web UI のインストール</h2>

<ol>
  <li><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui" target="_blank">Stable Diffusion web UI のページ</a>
から「Code &gt; Download ZIP」でファイルをダウンロードする。<br />
Git を使える人は <code class="language-plaintext highlighter-rouge">git clone</code> してもよい。</li>
  <li>ダウンロードした ZIP ファイルを展開する。<br />
展開したフォルダがそのままインストール先となるため、インストールしたいフォルダに展開すればよい。</li>
  <li>展開したフォルダにある「webui-user.bat」を右クリックしてプロパティをクリックする。</li>
  <li>プロパティ下部「セキュリティ」の右にある「許可する」にチェックを入れて OK をクリックする。</li>
  <li>「webui-user.bat」をダブルクリックして起動する。 (管理者ではない一般ユーザーで実行してよい)</li>
  <li>必要なファイルが自動でダウンロード・インストールされるため完了するまで待つ。</li>
  <li>インストールと起動が完了したら <code class="language-plaintext highlighter-rouge">Running on local URL:  http://127.0.0.1:7860</code> が表示される。</li>
  <li>ブラウザで <code class="language-plaintext highlighter-rouge">http://127.0.0.1:7860</code> を開く。</li>
</ol>

<h2 id="web-ui-起動時にエラーが発生する場合">web UI 起動時にエラーが発生する場合</h2>

<h3 id="runtimeerror-cannot-add-middleware-after-an-application-has-started">RuntimeError: Cannot add middleware after an application has started.</h3>

<p>web UI のバージョンによっては webui-user.bat を起動後に以下のエラーが表示される。</p>

<pre><code class="language-cmd">RuntimeError: Cannot add middleware after an application has started
</code></pre>

<p>この場合はコマンドプロンプトで以下を実行してから再度 webui-user.bat を起動する。</p>

<pre><code class="language-cmd">cd [web UIのインストール先パス]
venv\Scripts\activate.bat
pip install --upgrade fastapi==0.90.1
</code></pre>

<h3 id="loading-stable-diffusion-model-outofmemoryerror-や-torchcudaoutofmemoryerror-cuda-out-of-memory">loading stable diffusion model: OutOfMemoryError や torch.cuda.OutOfMemoryError: CUDA out of memory.</h3>

<p>VRAM が不足しているときに表示される。<br />
webui-user.bat を起動する前にタスクマネージャーを起動しておき、
「パフォーマンス」タブで GPU の「専用 GPU メモリ使用量」が 100% になっていないか確認するとよい。</p>

<p>VRAM が不足している場合は <code class="language-plaintext highlighter-rouge">--lowvram</code> オプションを指定することで起動できる場合がある。<br />
「webui-user.bat」をテキストエディタで開き</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span>
</code></pre></div></div>

<p>となっている部分を以下のように変更し保存する。</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span><span class="na">--lowvram
</span></code></pre></div></div>

<h2 id="テキストからの画像生成-txt2img">テキストからの画像生成 (txt2img)</h2>

<p>web UI の URL を開くと txt2img の画面となる。
txt2img は文章、単語などの言葉から画像を生成できる。</p>

<h3 id="prompt-negative-prompt">Prompt, Negative prompt</h3>

<p>Prompt へ描かせたいもの、Negative prompt へ描かせたくないものを英語で入力し、
「Generate」をクリックすれば画像が生成される。
複数の要素を指定したい場合はカンマ (,) 区切りで入力する。</p>

<p>定番の「馬に乗った宇宙飛行士の写真」を生成させるなら Prompt へ以下を入力すればよい。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a photograph of an astronaut riding a horse
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">()</code> または <code class="language-plaintext highlighter-rouge">[]</code> で言葉を囲むことで強調/抑制できる。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">(言葉)</code>: 1.1倍強調</li>
  <li><code class="language-plaintext highlighter-rouge">((言葉))</code>: 1.21倍強調 (= 1.1×1.1)</li>
  <li><code class="language-plaintext highlighter-rouge">[言葉]</code>: 1.1倍抑制</li>
  <li><code class="language-plaintext highlighter-rouge">(言葉:1.5)</code>: 1.5倍強調</li>
</ul>

<p>参考: <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#attentionemphasis" target="_blank">Attention/emphasis</a></p>

<h3 id="generate--interrupt--skip">Generate / Interrupt / Skip</h3>

<p>前述の通り、「Generate」をクリックすると画像の生成が開始される。</p>

<p>生成が始まると Interrupt / Skip ボタンに変化する。
Interrupt で生成を中断し終了する。
Skip は後述の Batch で複数枚生成している場合に、現在生成しているものをスキップできる。</p>

<h3 id="生成画像の出力先">生成画像の出力先</h3>

<p>生成後に画像下のフォルダボタンをクリックすると、出力先の outputs\txt2img-images フォルダが開かれる。</p>

<p>Save ボタンをクリックすると log\images フォルダにコピーが保存される。</p>

<h2 id="txt2img-の設定項目">txt2img の設定項目</h2>

<h3 id="width-height">Width, Height</h3>

<p>生成する画像の幅と高さ。</p>

<p>モデルにもよるが、デフォルトの 512 x 512 が一番うまく画像を生成できる。
これでは小さいため解像度を上げたくなるが、
解像度を上げると破綻した画像が生成されやすくなる。</p>

<p>Width, Height はあまり上げずに下記の Hires. fix や
「Extras」タブにある拡大機能、画像からの画像生成 (img2img) がオススメ。</p>

<p>16:9 の画像を生成したいなら 896 x 512 を指定するとよい。</p>

<h3 id="batch-count-batch-size">Batch count, Batch size</h3>

<p>Batch size が1回で生成する枚数で、Batch count が何回実行するか。
最終的に Batch size × Batch count の枚数が生成される。</p>

<p>Batch size を増やすと VRAM の必要量が増える。</p>

<h3 id="seed">Seed</h3>

<p>乱数の種。
Seed の値とモデル、プロンプト等の生成条件が同じであれば毎回同じ画像が生成される。</p>

<p>サイコロアイコンをクリックするか -1 を指定すればランダムに、
リサイクルアイコンをクリックすると前回と同じ Seed がセットされる。</p>

<p>基本的には -1 を指定し画像をランダム生成するが、
プロンプトやサンプリングの影響を比較したい場合には値を固定する。</p>

<p>右にある Extra にチェックを入れると追加の UI が表示される。
Seed を固定し Variation strength を上げることで、
大まかな構図はそのままに一部が変わった画像を生成できる。
全体の雰囲気はいいけど一部を修正したいときに使える。</p>

<h3 id="sampling-method-sampling-steps">Sampling method, Sampling steps</h3>

<p>Sampling steps を上げると精緻な絵になるが生成に時間がかかる。
上げすぎてもあまり違いがわからない。デフォルトの 20 から 50 くらいがよさそう。</p>

<p>Sampling method の違いはよくわからない。
「DPM++ SDE karras」を選ぶとデフォルトの「Euler a」より
ステップ数が少なくてもいい絵ができる気がする。</p>

<h3 id="cfg-scale">CFG Scale</h3>

<p>プロンプトに対してどの程度従うかを設定できるらしい。
値を大きくすればプロンプトに沿った画像が生成される反面、破綻した画像が生成されやすくなるとか。</p>

<p>デフォルトの 7 のままでよさそう。</p>

<p>参考: <a href="https://gigazine.net/news/20220928-stable-diffusion-classifier-free-guidance/" target="_blank">画像生成AI「Stable Diffusion」でどれぐらいプロンプト・呪文の指示に従うかを決める「CFG(classifier-free guidance)」とは一体何なのか？ - GIGAZINE</a></p>

<h3 id="restore-faces-tiling">Restore faces, Tiling</h3>

<p>Restore faces は人間の顔を生成した際に補正してくれる機能だが、
二次元のアニメ調イラストではキャラの目の中に人間の目が描かれて気持ち悪くなるのでオフ推奨。</p>

<p>Tiling はタイルのように並べても継ぎ目のないシームレスな画像を生成する。
3D のテクスチャを作成するのに使えるらしい。</p>

<h3 id="hires-fix">Hires. fix</h3>

<p>生成した画像を拡大して高解像度化してくれるがその分時間がかかる。
<del>気に入ったものだけをあとから拡大したほうが効率がよいのでオフ推奨。</del></p>

<p>2023/04/10 追記：Hires. fix の Upscaler で Latent 系を選択すると細部の描き込みが追加される。
単純な拡大機能である「Extras」タブと違い、イラストが改変されるため元のイラストと印象が異なってくる。</p>

<h4 id="hires-steps">Hires steps</h4>

<p>おそらく Sampling steps と似たようなものだと思われるが上げてもあまり違いがわからない。
デフォルトの 0 では Sampling steps と同じ値が使用される。</p>

<h4 id="denoising-strength">Denoising strength</h4>

<p>下げると元画像に近いがぼんやりとした画像、上げると元画像と違う画像になっていく。</p>

<p>デフォルトの 0.7 では大きく変わる場合があるため、元画像に似せたいなら 0.5 ～ 0.6 くらいへ下げるとよい。</p>

<h2 id="モデルのダウンロードと追加">モデルのダウンロードと追加</h2>

<p>web UI の初期状態でもモデルがインストールされるが、
画風は実写的でアニメ調の二次元イラストを生成するには向いていない。
モデルと呼ばれるファイルを追加することで画風を変えることができる。</p>

<h3 id="モデルのダウンロード">モデルのダウンロード</h3>

<p>モデルは <a href="https://huggingface.co/spaces/huggingface-projects/diffusers-gallery" target="_blank">Hugging Face</a> や
<a href="https://civitai.com/" target="_blank">Civitai</a> などで探してダウンロードする。</p>

<p>拡張子が .ckpt または .safetensor のものをダウンロードすればよい。
両方用意されている場合は .safetensor のほうが安全性が高いためそちらをダウンロードする。</p>

<p>参考: <a href="https://economylife.net/safetensors-ckpt-difference/" target="_blank">AIモデルのsafetensors形式とは何者か？ckptと比較しつつ解説する | 経済的生活日誌</a></p>

<h4 id="モデルのファイル名に付いてる-pruned-や-fp16-って何">モデルのファイル名に付いてる pruned や fp16 って何？</h4>

<p>画像生成に影響の少ない部分を削って軽量化したもの。
pruned や fp16 が用意されている場合はそちらをダウンロードするとよい。</p>

<p><a href="https://www.tensorflow.org/guide/mixed_precision?hl=ja" target="_blank">TensorFlow のサイト</a>
によると「NVIDIA GPU は float32 よりも float16 で速く演算を実行でき」るらしい。 (float16 = fp16)</p>

<h3 id="モデルの追加方法">モデルの追加方法</h3>

<ol>
  <li>モデルをダウンロードする。</li>
  <li>ダウンロードしたモデルを web UI のフォルダにある models\Stable-diffusion フォルダへ入れる。</li>
  <li>web UI 画面左上にある「Stable Diffusion checkpoint」右の更新ボタンを押す。</li>
  <li>リストでモデルが選択できるようになる。</li>
</ol>

<h3 id="オススメの二次元イラスト系モデル">オススメの二次元イラスト系モデル</h3>

<p>以下の2つのモデルはどちらも美しいイラストが生成できるためオススメ。</p>

<ul>
  <li><a href="https://huggingface.co/WarriorMama777/OrangeMixs" target="_blank">AbyssOrangeMix3 (AOM3)</a></li>
  <li><a href="https://huggingface.co/andite/anything-v4.0" target="_blank">Anything v4.5</a></li>
</ul>

<p>AbyssOrangeMix3 は A1 から A3 と A1B がある。
A1 がアニメ調、A2が絵画調、A1B と A3 が中間。</p>

<p>アニメ調 ← A1 A1B A3 A2 → 絵画調</p>

<p>どちらのモデルも一緒に VAE (後述) が公開されているのでそちらを利用する。</p>

<h2 id="vae">VAE</h2>

<p>同じモデルでも VAE によって色が変わり印象が異なってくる。
AbyssOrangeMix や Anything のように VAE が一緒に公開されているモデルは
そちらを利用したほうがよい。</p>

<h3 id="vae-を選択できるようにする">VAE を選択できるようにする</h3>

<ol>
  <li>「Settings」タブをクリック</li>
  <li>左の一覧から「User interface」をクリック</li>
  <li>下から4つ目くらいにある「Quicksettings list」に <code class="language-plaintext highlighter-rouge">,sd_vae</code> を追加する (<code class="language-plaintext highlighter-rouge">sd_model_checkpoint,sd_vae</code> になる)</li>
  <li>上部の「Apply settings」をクリック</li>
  <li>「Reload UI」をクリック</li>
</ol>

<h3 id="vae-の追加方法">VAE の追加方法</h3>

<ol>
  <li>VAE をダウンロードする。</li>
  <li>ダウンロードした VAE を web UI のフォルダにある models\VAE フォルダへ入れる。</li>
  <li>web UI 画面上部にある「SD VAE」右の更新ボタンを押す。</li>
  <li>リストで VAE が選択できるようになる。</li>
</ol>

<h2 id="過去に生成した画像のプロンプト等を確認-png-info">過去に生成した画像のプロンプト等を確認 (PNG Info)</h2>

<p>生成した画像を「PNG Info」タブにある「Source」へ
ドラッグアンドドロップすることでプロンプト、モデル、Seed 等を確認できる。</p>

<p>また、「Send to txt2img」等のボタンを押すことで txt2img 等へコピー可能。
過去に生成したものと似た画像を簡単に生成できる。
ただし、モデルと VAE は反映されないので注意。</p>

<h2 id="画像とテキストからの画像生成-img2img">画像とテキストからの画像生成 (img2img)</h2>

<p>「img2img」タブで画像とテキストを元に新たな画像を生成できる。</p>

<p>画像により構図やポーズをある程度制御できるため、
txt2img と比べ出力画像の解像度を高くしても破綻しにくい。
よって、txt2img では解像度低めでランダムに大量生成し、
良いものができたら img2img で高解像度化、細部の修正を行うとよい。</p>

<p>また、txt2img で生成された画像に足りない要素を手で描き加えたあと再生成するといった使い方もできる。
例えば、肌色で直線を描けば腕や足として認識して描き直してくれる。
英語で伝えにくい構図やポーズを描かせるのにも有用。</p>

<p>プロンプト等の設定は txt2img と同じ。
プロンプトなしの画像のみでも生成できるが、プロンプトを入力したほうが当然精度は高い。
txt2img で作成した画像を img2img で高解像度化するのであれば同じプロンプトを指定するとよい。</p>

<h3 id="元画像の指定">元画像の指定</h3>

<p>元となる画像を「ここに画像をドロップ」と書いてあるところにドラッグアンドドロップするだけ。</p>

<h3 id="resize-mode">Resize mode</h3>

<p>Resize mode は元画像と生成画像の縦横比が違う場合の処理を指定できる。</p>

<ul>
  <li>Just resize<br />
元画像の縦横比を無視して生成画像全体に引き伸ばす。<br />
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が横長の 1280 x 960 に引き伸ばされる。</li>
  <li>Crop and resize<br />
元画像の縦横比を維持して拡大/縮小し、はみ出た部分は無視する。<br />
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が 1280 x 1280 に引き伸ばされ上下が切れる。</li>
  <li>Resize and fill<br />
元画像の縦横比を維持して拡大/縮小し、足りない部分を埋める。<br />
元画像が 512 x 512、生成画像が 1280 x 960 なら、元画像が 960 x 960 に引き伸ばされ左右の足りない部分は自動生成される。</li>
  <li>Just resize (latent upscale)<br />
元画像を高解像度化したあと Just resize と同様の処理を行う。</li>
</ul>

<h3 id="denoising-strength-1">Denoising strength</h3>

<p>下げると元画像に近いがぼんやりとした画像、上げると元画像と違う画像になっていく。</p>

<p>デフォルトの 0.75 では大きく変わる場合があるため、元画像に似せたいなら 0.5 ～ 0.6 くらいへ下げるとよい。</p>

<h2 id="img2img-内のタブ">img2img 内のタブ</h2>

<ul>
  <li>Sketch: img2img とほとんど同じだが、画面上の元画像に対してその場で書き込んで修正が可能。</li>
  <li>Inpaint: 画像の一部のみを生成する。黒く塗りつぶした部分、または塗りつぶしていない部分を描き直す。</li>
  <li>Inpaint sketch: 画像の一部のみを生成する。色を塗った部分のみ、その色を反映して描き直す。</li>
  <li>Inpaint upload: Inpaint と同様だがマスクを別画像で指定できる。</li>
  <li>Batch: ディレクトリを指定してバッチ処理ができる。</li>
</ul>

<h2 id="画像からプロンプトを生成-interrogate-clip-interrogate-deepbooru">画像からプロンプトを生成 (Interrogate CLIP, Interrogate DeepBooru)</h2>

<p>画像を指定したあと「Interrogate CLIP」または「Interrogate DeepBooru」のボタンをクリックすると
画像からプロンプトを生成できる。</p>

<p>「Interrogate DeepBooru」は Danbooru のタグになる。</p>

<h2 id="設定-settings">設定 (Settings)</h2>

<p>「Settings」タブで設定が変更できる。
全部説明するとキリがないため個人的に便利だと思う設定を紹介。</p>

<h3 id="saving-imagesgrids--images-filename-pattern">Saving images/grids &gt; Images filename pattern</h3>

<p>出力するファイル名のパターン。</p>

<p>デフォルトの空欄状態だと同日内での連番と Seed 値になるため、
他の日付のものと同じフォルダに入れたとき順番がバラバラになる。
以下を設定し、直下にある「Add number to filename when saving」のチェックをはずすと、
ファイル名が日付と時刻となるため便利。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[datetime&lt;%Y-%m-%d %H%M%S&gt;&lt;+0900&gt;]-[seed]-[model_name]
</code></pre></div></div>

<p>ファイル名に使用できるタグは「Images filename pattern」という文字にマウスカーソルを合わせると表示される。</p>

<blockquote>
  <p>[steps],
[cfg],
[prompt_hash],
[prompt],
[prompt_no_styles],
[prompt_spaces],
[width],
[height],
[styles],
[sampler],
[seed],
[model_hash],
[model_name],
[prompt_words],
[date],
[datetime],
[datetime&lt;Format&gt;],
[datetime&lt;Format&gt;&lt;Time Zone&gt;],
[job_timestamp]</p>
</blockquote>

<h3 id="saving-imagesgrids--always-save-all-generated-image-grids-とuser-interface--show-grid-in-results-for-web">Saving images/grids &gt; Always save all generated image grids と<br />User interface &gt; Show grid in results for web</h3>

<p>生成した画像を縦横に連結したグリッド画像を生成する設定。</p>

<p>Batch で大量の画像を生成すると、完了後に
Interrupt / Skip ボタンが Generate ボタンへ戻るのに時間がかかる。
これはグリッド画像の作成が原因のため、
待ちたくない場合は上記のチェックをはずすと良い。</p>

<h2 id="起動時の引数設定">起動時の引数設定</h2>

<p>「webui-user.bat」をテキストエディタで編集することで web UI 起動時の引数を設定できる。</p>

<h3 id="xformers-の導入">xFormers の導入</h3>

<p>xFormers を導入すると画像生成速度が向上しVRAMの使用量も削減される。
ただし、Seed 値を固定しても微妙に異なる画像が生成されるようになるという欠点がある。
欠点より利点が大きいため導入したほうがよい。</p>

<p>導入方法は簡単で、「webui-user.bat」をテキストエディタで開き</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span>
</code></pre></div></div>

<p>となっている部分を以下のように変更し保存する。</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span><span class="na">--xformers
</span></code></pre></div></div>

<p>保存後の初回起動時に xFormers がインストールされる。</p>

<h3 id="no-half-vae-の指定">–no-half-vae の指定</h3>

<p>VAE を変更して画像を生成しているとまれにエラーが発生し、
エラーを回避するためには <code class="language-plaintext highlighter-rouge">--no-half-vae</code> というオプションを利用するよう指示されることがある。
この場合も同様に「webui-user.bat」をテキストエディタで編集すればよい。</p>

<p><code class="language-plaintext highlighter-rouge">--no-half-vae</code> だけを指定するなら</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span><span class="na">--no-half-vae
</span></code></pre></div></div>

<p>xFormers と併用するなら</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">set</span> <span class="kd">COMMANDLINE_ARGS</span><span class="o">=</span><span class="na">--xformers --no-half-vae
</span></code></pre></div></div>]]></content><author><name>saasan</name></author><category term="blog" /><category term="Stable Diffusion" /><summary type="html"><![CDATA[Windows 10 へのインストール方法と使い方、画像生成のコツを紹介]]></summary></entry></feed>